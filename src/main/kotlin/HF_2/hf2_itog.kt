package org.example.HF_2

// 1) Чтобы создать переменную, компилятор должен знать её имя, тип и возможность её повторного использования

// 2) Если тип переменной не задан явно, то компилятор определяет его по значению

// 3) В переменной хранится ссылка на объект

// 4) Объект обладает состоянием и поведением. Доступ к его поведению предоставляется через функции

/* 5) Определение переменной с ключевым словом var означает, что ссылка на объект, хранящаяся в переменной,
может быть изменена.
Определение переменной с ключевым словом val означает, что переменная содержит одну и ту же ссылку до конца
работы программы
 */

/* 6) В Kotlin поддерживаются следующие базовые типы:
Byte = -128 до 127
Short = -32768 до 32767
Int = -2147483648 до 2147483647
Long = -huge до (huge - 1)
Float = числа с плавающей точкой (32бита)
Double = числа с плавающей точкой (64бита)
Boolean = true/false
Char = '1' символ
String = "цепочка символов"
 */

/* 7) Чтобы явно определить тип переменной, поставьте двоеточие после имени переменной, а затем укажите её тип:
var tinyNum: Byte
 */

// 8) Значение может быть присвоено только переменной, обладающей совместимым типом

/* 9) Один числовой тип можно преобразовать к другому числовому типу. Если значение не помещается в новый тип,
происходит потеря точности.
 */

/* 10) Для создания массивов используется функция arrayOf:
var myArray = arrayOf(1, 2, 3)
 */

// 11) При обращении к элементу массива указывается его индекс: например myArray[0]. Первый элемент в массиве имеет индекс 0

// 12) Для получения размера массива используется конструкция myArray.size

/* 13) Компилятор определяет тип массива по значениям его элементов. Вы также можете явно определить тип массива:
var myArray: Array<Byte>
 */

// 14) Если массив определяется ключевым словом val, вы все равно можете определять элементы в массиве

/* 15) Строковые шаблоны предоставляют простой и быстрый механизм включения переменных или результатов
вычисления выражений в строку
 */